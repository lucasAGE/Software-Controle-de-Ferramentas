import sys
import os
from database.database_utils import executar_query
from database.database import registrar_movimentacao, buscar_ferramenta_por_codigo, criar_tabelas

# ----- Fun√ß√µes de Administra√ß√£o -----
def registrar_usuario(nome, senha, rfid, tipo):
    """
    Registra um novo usu√°rio no sistema.

    Par√¢metros:
        nome (str): Nome do usu√°rio.
        senha (str): Senha do usu√°rio j√° transformada (por exemplo, hash).
        rfid (str): RFID do usu√°rio.
        tipo (str): Tipo do usu√°rio (ex: "admin", "usuario", etc.).

    Retorna:
        str: Mensagem de sucesso ou erro.
    """
    try:
        # Remove espa√ßos em branco dos dados
        nome = nome.strip()
        senha = senha.strip()
        rfid = rfid.strip()
        tipo = tipo.strip()

        # Valida√ß√£o dos campos obrigat√≥rios
        if not nome or not senha or not rfid or not tipo:
            return "‚ö†Ô∏è Nome, Senha, RFID e Tipo s√£o obrigat√≥rios!"

        query = "INSERT INTO usuarios (nome, senha, rfid, tipo) VALUES (?, ?, ?, ?)"
        executar_query(query, (nome, senha, rfid, tipo))
        return f"‚úÖ Usu√°rio {nome} registrado com sucesso!"
    except Exception as e:
        return f"‚ö†Ô∏è Erro ao registrar usu√°rio: {e}"



def registrar_ferramenta(nome, codigo_barra, estoque_almoxarifado, estoque_ativo, consumivel):
    """
    Registra uma nova ferramenta no sistema.

    Par√¢metros:
        nome (str): Nome da ferramenta.
        codigo_barra (str): C√≥digo de barras da ferramenta.
        estoque_almoxarifado (int): Quantidade inicial no almoxarifado.
        estoque_ativo (int ou str): Quantidade do estoque ativo.
        consumivel (str): Indica se a ferramenta √© consum√≠vel ("SIM" ou "N√ÉO").

    Retorna:
        str: Mensagem de sucesso ou erro.
    """
    try:
        # Remove espa√ßos em branco
        nome = nome.strip()
        codigo_barra = codigo_barra.strip()
        
        # Valida√ß√£o dos campos obrigat√≥rios
        if not nome or not codigo_barra or estoque_almoxarifado < 0:
            return "‚ö†Ô∏è Nome, c√≥digo de barras e uma quantidade v√°lida para o almoxarifado s√£o obrigat√≥rios!"

        # Convers√£o e valida√ß√£o do estoque ativo
        try:
            if isinstance(estoque_ativo, str) and estoque_ativo.strip():
                estoque_ativo = int(estoque_ativo.strip())
            elif not isinstance(estoque_ativo, int):
                estoque_ativo = 0
        except ValueError:
            return "‚ö†Ô∏è Estoque ativo deve ser um n√∫mero inteiro!"

        # Tratar o campo consum√≠vel
        consumivel = consumivel.strip().upper()  # Converte para mai√∫sculas para manter consist√™ncia
        if consumivel not in ["SIM", "N√ÉO"]:
            return "‚ö†Ô∏è O campo Consum√≠vel deve ser 'SIM' ou 'N√ÉO'!"

        query = """
            INSERT INTO ferramentas (nome, codigo_barra, estoque_almoxarifado, estoque_ativo, consumivel)
            VALUES (?, ?, ?, ?, ?)
        """
        executar_query(query, (nome, codigo_barra, estoque_almoxarifado, estoque_ativo, consumivel))
        return f"‚úÖ Ferramenta {nome} registrada com sucesso!"
    except Exception as e:
        return f"‚ö†Ô∏è Erro ao registrar ferramenta: {e}"



def registrar_maquina(nome):
    """
    Registra uma nova m√°quina no sistema.

    Par√¢metros:
        nome (str): Nome da m√°quina.

    Retorna:
        str: Mensagem de sucesso ou erro.
    """
    try:
        nome = nome.strip()
        if not nome:
            return "‚ö†Ô∏è O nome da m√°quina √© obrigat√≥rio!"
        query = "INSERT INTO maquinas (nome) VALUES (?)"
        executar_query(query, (nome,))
        return f"‚úÖ M√°quina {nome} registrada com sucesso!"
    except Exception as e:
        return f"‚ö†Ô∏è Erro ao registrar m√°quina: {e}"



# ----- Fun√ß√µes de Movimenta√ß√£o -----
def retirar_ferramenta(rfid, codigo_barra, quantidade=1):
    """
    Processa a retirada de uma ferramenta do estoque.

    Par√¢metros:
        rfid (str): RFID do usu√°rio.
        codigo_barra (str): C√≥digo de barras da ferramenta.
        quantidade (int, opcional): Quantidade a retirar. Padr√£o √© 1.

    Retorna:
        str: Mensagem de sucesso ou erro.
    """
    return realizar_movimentacao(rfid, codigo_barra, "RETIRADA", quantidade)


def devolver_ferramenta(rfid, codigo_barra, quantidade=1):
    """
    Processa a devolu√ß√£o de uma ferramenta ao estoque.

    Par√¢metros:
        rfid (str): RFID do usu√°rio.
        codigo_barra (str): C√≥digo de barras da ferramenta.
        quantidade (int, opcional): Quantidade a devolver. Padr√£o √© 1.

    Retorna:
        str: Mensagem de sucesso ou erro.
    """
    return realizar_movimentacao(rfid, codigo_barra, "DEVOLUCAO", quantidade)


def dar_baixa_ferramenta(codigo_barra):
    """
    Zera a quantidade do estoque almoxarifado de uma ferramenta, efetivamente dando baixa nela.

    Par√¢metros:
        codigo_barra (str): C√≥digo de barras da ferramenta.

    Retorna:
        str: Mensagem de sucesso ou erro.
    """
    try:
        codigo_barra = codigo_barra.strip()
        if not codigo_barra:
            return "‚ö†Ô∏è C√≥digo de barra √© obrigat√≥rio!"
        query = "UPDATE ferramentas SET estoque_almoxarifado = 0 WHERE codigo_barra = ?"
        executar_query(query, (codigo_barra,))
        return "‚úÖ Ferramenta dada baixa com sucesso!"
    except Exception as e:
        return f"‚ö†Ô∏è Erro ao dar baixa na ferramenta: {e}"


def dar_alta_ferramenta(codigo_barra, quantidade):
    """
    Incrementa a quantidade do estoque almoxarifado de uma ferramenta.

    Par√¢metros:
        codigo_barra (str): C√≥digo de barras da ferramenta.
        quantidade (int): Quantidade a ser adicionada ao almoxarifado.

    Retorna:
        str: Mensagem de sucesso ou erro.
    """
    try:
        codigo_barra = codigo_barra.strip()
        if not codigo_barra or quantidade <= 0:
            return "‚ö†Ô∏è C√≥digo de barra e quantidade v√°lida s√£o obrigat√≥rios!"
        query = "UPDATE ferramentas SET estoque_almoxarifado = estoque_almoxarifado + ? WHERE codigo_barra = ?"
        executar_query(query, (quantidade, codigo_barra))
        return f"‚úÖ Ferramenta {codigo_barra} atualizada com sucesso!"
    except Exception as e:
        return f"‚ö†Ô∏è Erro ao dar alta na ferramenta: {e}"


def realizar_movimentacao(rfid, codigo_barra, acao, quantidade=1, motivo=None, operacoes=None, avaliacao=None):
    """
    Processa a retirada, devolu√ß√£o ou consumo de uma ferramenta no banco de dados.

    Par√¢metros:
        rfid (str): RFID do usu√°rio.
        codigo_barra (str): C√≥digo de barras da ferramenta.
        acao (str): A√ß√£o a ser realizada ('RETIRADA', 'DEVOLUCAO' ou 'CONSUMO').
        quantidade (int, opcional): Quantidade da movimenta√ß√£o. Padr√£o √© 1.
        motivo (str, opcional): Motivo do consumo (obrigat√≥rio para 'CONSUMO').
        operacoes (int, opcional): N√∫mero de opera√ß√µes realizadas (para 'CONSUMO').
        avaliacao (int, opcional): Nota de avalia√ß√£o (1-5) quanto √† qualidade/durabilidade (para 'CONSUMO').

    Retorna:
        dict ou str: Mensagem de sucesso ou erro.
    """
    try:
        rfid, codigo_barra = rfid.strip(), codigo_barra.strip()

        # Buscar ID do usu√°rio
        query = "SELECT id FROM usuarios WHERE rfid = ?"
        usuario = executar_query(query, (rfid,), fetch=True)
        if not usuario:
            return "‚ö†Ô∏è Usu√°rio n√£o encontrado!"
        usuario_id = usuario[0][0]

        # Processa a movimenta√ß√£o utilizando a fun√ß√£o centralizada do database.py,
        # repassando os dados extras caso a a√ß√£o seja CONSUMO.
        resultado = registrar_movimentacao(usuario_id, codigo_barra, acao, quantidade, motivo, operacoes, avaliacao)
        return resultado
    except Exception as e:
        return f"‚ö†Ô∏è Erro ao realizar movimenta√ß√£o: {e}"


# ----- Inicializa√ß√£o -----
def main():
    """
    Fun√ß√£o principal que inicializa o banco de dados e lan√ßa a interface gr√°fica.
    
    Atualiza o caminho do banco para o backup do dia, cria as tabelas, se necess√°rio,
    e inicia o QApplication para exibir a interface.
    """
    try:
        from database.database import criar_tabelas
        from database.database_backup import verificar_backup
        from database import config

        # Atualiza o caminho do banco para o backup do dia
        config.DATABASE_CAMINHO = verificar_backup()

        if not os.path.exists(config.DATABASE_CAMINHO):
            print("üìå Banco de dados n√£o encontrado. Criando novo...")
            criar_tabelas()
        else:
            print(f"‚úÖ Banco de dados pronto para uso: {config.DATABASE_CAMINHO}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na inicializa√ß√£o do banco de dados: {e}")

    # Inicializa o QApplication garantindo que n√£o haja m√∫ltiplas inst√¢ncias
    from PyQt5.QtWidgets import QApplication
    app = QApplication.instance() or QApplication(sys.argv)

    # Cria e exibe a janela principal (navega√ß√£o entre telas)
    from interface.navegacao import Navegacao
    janela = Navegacao()
    janela.setWindowTitle("Controle de Ferramentas")
    janela.resize(800, 600)
    janela.show()

    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
