from database.database_utils import executar_query

def read_barcode():
    """
    Solicita ao usu√°rio a leitura do c√≥digo de barras.
    Retorna o c√≥digo lido ou None se estiver vazio.
    """
    print("üì° Aguardando leitura do c√≥digo de barras... (Escaneie agora)")
    barcode = input("C√≥digo de Barras: ").strip()
    if not barcode:
        print("‚ö†Ô∏è Nenhum c√≥digo de barras lido.")
        return None
    return barcode

def search_item_by_barcode(barcode):
    """
    Busca no banco de dados o item correspondente ao c√≥digo de barras informado.
    Retorna um dicion√°rio com os dados do item ou None se n√£o for encontrado.
    """
    query = "SELECT id, nome, estoque_almoxarifado FROM ferramentas WHERE codigo_barra = ?"
    resultado = executar_query(query, (barcode,), fetch=True)
    if resultado and resultado[0]:
        item_id, nome, estoque_almoxarifado = resultado[0]
        return {"id": item_id, "nome": nome, "estoque_almoxarifado": estoque_almoxarifado}
    return None

def get_item_from_barcode():
    """
    Orquestra a leitura e a busca do item a partir do c√≥digo de barras.
    Retorna os dados do item (dicion√°rio) ou None, caso n√£o encontre.
    """
    try:
        barcode = read_barcode()
        if not barcode:
            return None

        item = search_item_by_barcode(barcode)
        if item:
            print(f"‚úÖ Item encontrado: {item['nome']} (Estoque Almoxarifado dispon√≠vel: {item['estoque_almoxarifado']})")
            return item
        else:
            print("‚ö†Ô∏è C√≥digo de barras n√£o encontrado no banco de dados.")
            return None

    except KeyboardInterrupt:
        print("\n‚ùå Opera√ß√£o interrompida pelo usu√°rio.")
        return None
    except Exception as e:
        print(f"‚ùå Erro ao processar c√≥digo de barras: {e}")
        return None

if __name__ == '__main__':
    get_item_from_barcode()
