from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QPushButton, QLineEdit, QFormLayout, 
    QMessageBox, QSpinBox, QTableWidget, QTableWidgetItem, QDialog, QDialogButtonBox
)
from PyQt5.QtCore import Qt

from main import realizar_movimentacao
from database.database import buscar_ferramenta_por_codigo, buscar_ultimas_movimentacoes


class DialogoConsumo(QDialog):
    """
    Popup para registrar os dados adicionais no consumo de um item consum√≠vel.
    Agora o motivo √© escolhido entre op√ß√µes fixas.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Registrar Consumo")
        self.setModal(True)
        self.motivo_selecionado = None
        self.init_ui()

    def init_ui(self):
        self.layout = QFormLayout(self)

        # Bot√µes para motivo
        self.motivos = {
            "Desgaste Natural": QPushButton("üü¢ Desgaste Natural"),
            "Quebra Prematura": QPushButton("üî¥ Quebra Prematura"),
            "Erro de Fundi√ß√£o": QPushButton("üü° Erro de Fundi√ß√£o"),
            "Uso Incorreto": QPushButton("üîµ Uso Incorreto")
        }

        for motivo, botao in self.motivos.items():
            botao.setCheckable(True)
            botao.clicked.connect(lambda checked, m=motivo: self.selecionar_motivo(m))
            self.layout.addRow(botao)

        # Campo de opera√ß√µes
        self.spin_operacoes = QSpinBox()
        self.spin_operacoes.setMinimum(1)
        self.spin_operacoes.setMaximum(999)
        self.layout.addRow("N√∫mero de Opera√ß√µes:", self.spin_operacoes)

        # Campo de avalia√ß√£o
        self.spin_avaliacao = QSpinBox()
        self.spin_avaliacao.setMinimum(1)
        self.spin_avaliacao.setMaximum(5)
        self.layout.addRow("Avalia√ß√£o (1-5):", self.spin_avaliacao)

        # Bot√µes OK / Cancelar
        self.button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.button_box.accepted.connect(self.validar_confirmar)
        self.button_box.rejected.connect(self.reject)
        self.layout.addWidget(self.button_box)

    def selecionar_motivo(self, motivo):
        self.motivo_selecionado = motivo
        # Desmarca os outros bot√µes
        for m, b in self.motivos.items():
            b.setChecked(m == motivo)

    def validar_confirmar(self):
        if not self.motivo_selecionado:
            QMessageBox.warning(self, "Erro", "‚ö†Ô∏è Selecione um motivo para o consumo.")
            return
        self.accept()

    def get_values(self):
        """
        Retorna os valores: motivo selecionado, n√∫mero de opera√ß√µes e avalia√ß√£o.
        """
        return self.motivo_selecionado, self.spin_operacoes.value(), self.spin_avaliacao.value()


class TelaMovimentacao(QWidget):
    """
    Tela de movimenta√ß√£o de ferramentas.

    Permite a retirada, devolu√ß√£o e consumo de ferramentas, busca os dados da pe√ßa 
    e exibe as √∫ltimas movimenta√ß√µes em uma tabela.
    """
    def __init__(self, navegacao, rfid_usuario):
        """
        Inicializa a tela de movimenta√ß√£o.

        Par√¢metros:
            navegacao (object): Objeto respons√°vel pela navega√ß√£o entre telas.
            rfid_usuario (str): RFID do usu√°rio atual.
        """
        super().__init__()
        self.navegacao = navegacao
        self.rfid_usuario = rfid_usuario
        self._init_ui()

    def _init_ui(self):
        """
        Configura a interface do usu√°rio, organizando os componentes em layout.
        """
        self.layout = QVBoxLayout()

        # Adiciona o t√≠tulo
        self.layout.addWidget(self._criar_label_titulo())

        # Adiciona o formul√°rio de entrada
        self.layout.addLayout(self._criar_formulario())

        # Adiciona os bot√µes de movimenta√ß√£o e navega√ß√£o
        self.layout.addLayout(self._criar_botoes())

        # Adiciona a tabela de √∫ltimas movimenta√ß√µes
        self.layout.addWidget(QLabel("üìú √öltimas Movimenta√ß√µes:"))
        self.layout.addWidget(self._criar_tabela())

        self.setLayout(self.layout)
        self.carregar_ultimas_movimentacoes()

    def _criar_label_titulo(self):
        """
        Cria e retorna o r√≥tulo de t√≠tulo da tela.
        """
        label = QLabel("üì¶ Movimenta√ß√£o de Ferramentas")
        label.setAlignment(Qt.AlignCenter)
        return label

    def _criar_formulario(self):
        """
        Cria e retorna o layout de formul√°rio para entrada dos dados da ferramenta.
        """
        form_layout = QFormLayout()
        
        self.codigo_barras_input = QLineEdit()
        self.codigo_barras_input.setPlaceholderText("üîπ Escaneie o c√≥digo de barras da ferramenta")
        self.codigo_barras_input.returnPressed.connect(self.buscar_dados_peca)
        form_layout.addRow("üîñ C√≥digo de Barras:", self.codigo_barras_input)

        self.lbl_descricao = QLabel("üîé Descri√ß√£o: -")
        self.lbl_estoque = QLabel("üì¶ Estoque Atual: -")
        self.lbl_consumivel = QLabel("üîÅ Consum√≠vel: -")
        self.spin_quantidade = QSpinBox()
        self.spin_quantidade.setMinimum(1)
        self.spin_quantidade.setMaximum(999)

        form_layout.addRow("üìÑ Descri√ß√£o:", self.lbl_descricao)
        form_layout.addRow("üìä Estoque:", self.lbl_estoque)
        form_layout.addRow("üî¢ Quantidade:", self.spin_quantidade)
        form_layout.addRow("üîÅ Consum√≠vel:", self.lbl_consumivel)        

        return form_layout

    def _criar_botoes(self):
        """
        Cria e retorna um layout contendo os bot√µes de movimenta√ß√£o e navega√ß√£o.
        """
        layout_botoes = QVBoxLayout()

        btn_retirar = QPushButton("üî¥ Retirar Ferramenta")
        btn_retirar.clicked.connect(lambda: self.realizar_movimentacao_gui("RETIRADA"))
        layout_botoes.addWidget(btn_retirar)

        btn_devolver = QPushButton("üü¢ Devolver Ferramenta")
        btn_devolver.clicked.connect(lambda: self.realizar_movimentacao_gui("DEVOLUCAO"))
        layout_botoes.addWidget(btn_devolver)

        # Bot√£o de consumo como atributo, come√ßa desabilitado
        self.btn_consumir = QPushButton("üî∂ Consumir Ferramenta")
        self.btn_consumir.clicked.connect(lambda: self.realizar_movimentacao_gui("CONSUMO"))
        self.btn_consumir.setEnabled(False)
        layout_botoes.addWidget(self.btn_consumir)

        btn_voltar = QPushButton("‚¨ÖÔ∏è Voltar")
        btn_voltar.clicked.connect(lambda: self.navegacao.mostrar_tela("painel"))
        layout_botoes.addWidget(btn_voltar)

        return layout_botoes


    def _criar_tabela(self):
        """
        Cria e retorna a tabela que exibir√° as √∫ltimas movimenta√ß√µes.
        """
        self.tabela = QTableWidget()
        # Atualize o n√∫mero de colunas se desejar incluir mais dados (ex.: motivo, opera√ß√µes e avalia√ß√£o)
        self.tabela.setColumnCount(9)
        self.tabela.setHorizontalHeaderLabels([
            "Data/Hora", "Operador", "C√≥digo", "Descri√ß√£o", "Tipo", 
            "Qtd", "Motivo", "Opera√ß√µes", "Avalia√ß√£o"
        ])
        return self.tabela

    def _exibir_mensagem(self, titulo, mensagem, tipo="info"):
        """
        Exibe uma mensagem ao usu√°rio utilizando QMessageBox.

        Par√¢metros:
            titulo (str): T√≠tulo da mensagem.
            mensagem (str): Conte√∫do da mensagem.
            tipo (str): Tipo de mensagem ('info' ou 'warning').
        """
        if tipo == "info":
            QMessageBox.information(self, titulo, mensagem)
        else:
            QMessageBox.warning(self, titulo, mensagem)

    def validar_campos(self):
        """
        Valida os campos de entrada, garantindo que o c√≥digo de barras esteja preenchido.

        Retorna:
            str ou None: O c√≥digo de barras se v√°lido; caso contr√°rio, None.
        """
        codigo_barras = self.codigo_barras_input.text().strip()
        if not codigo_barras:
            self._exibir_mensagem("Erro", "‚ö†Ô∏è Nenhum c√≥digo de barras foi inserido!", "warning")
            return None
        return codigo_barras

    def buscar_dados_peca(self):
        """
        Busca os dados da ferramenta a partir do c√≥digo de barras e atualiza os campos:
        - Descri√ß√£o
        - Estoque total e ativo
        - Status de consum√≠vel
        Tamb√©m habilita/desabilita o bot√£o de consumo com base nisso.
        """
        codigo = self.codigo_barras_input.text().strip()
        if not codigo:
            return

        dados = buscar_ferramenta_por_codigo(codigo)
        if dados:
            self.lbl_descricao.setText(f"üîé Descri√ß√£o: {dados['nome']}")
            self.lbl_estoque.setText(
                f"üì¶ Estoque Atual: {dados['quantidade']} unidades | Ativo: {dados['estoque_ativo']}"
            )
            self.lbl_consumivel.setText(dados.get("consumivel", "N√ÉO").strip().upper())

            self.dados_ferramenta = dados  # guarda os dados para uso nas a√ß√µes

            # Resetar valor e deixar o m√°ximo para definir depois conforme a a√ß√£o
            self.spin_quantidade.setValue(1)
            self.spin_quantidade.setMaximum(999)  # m√°ximo tempor√°rio

            # Habilita bot√£o de consumo se for SIM
            if dados.get("consumivel", "N√ÉO").strip().upper() == "SIM":
                self.btn_consumir.setEnabled(True)
            else:
                self.btn_consumir.setEnabled(False)
        else:
            self.lbl_descricao.setText("üîé Descri√ß√£o: -")
            self.lbl_estoque.setText("üì¶ Estoque Atual: -")
            self.lbl_consumivel.setText("üîÅ Consum√≠vel: -")
            self._exibir_mensagem("Erro", "‚ùå Pe√ßa n√£o encontrada.", "warning")
            self.dados_ferramenta = None
            self.btn_consumir.setEnabled(False)


    def realizar_movimentacao_gui(self, acao):
        """
        Realiza a movimenta√ß√£o da ferramenta conforme a a√ß√£o especificada (RETIRADA, DEVOLUCAO ou CONSUMO)
        e atualiza a interface.

        Par√¢metros:
            acao (str): Tipo de movimenta√ß√£o.
        """
        codigo_barras = self.validar_campos()
        if not codigo_barras:
            return

        if not hasattr(self, 'dados_ferramenta') or not self.dados_ferramenta:
            self._exibir_mensagem("Erro", "‚ö†Ô∏è Nenhuma pe√ßa selecionada.", "warning")
            return

        estoque_disponivel = self.dados_ferramenta['quantidade']
        estoque_ativo = self.dados_ferramenta['estoque_ativo']

        # Ajusta o m√°ximo permitido no campo de quantidade, conforme a a√ß√£o
        if acao == "DEVOLUCAO":
            limite = estoque_ativo if estoque_ativo > 0 else 1
        else:  # RETIRADA ou CONSUMO
            limite = estoque_disponivel if estoque_disponivel > 0 else 1
        self.spin_quantidade.setMaximum(limite)

        # Se o valor atual for maior que o limite, for√ßa para o limite
        if self.spin_quantidade.value() > limite:
            self.spin_quantidade.setValue(limite)

        quantidade = self.spin_quantidade.value()

        # Valida√ß√£o espec√≠fica para devolu√ß√£o
        if acao == "DEVOLUCAO" and estoque_ativo < quantidade:
            self._exibir_mensagem("Erro", "‚ö†Ô∏è Estoque ativo insuficiente para devolu√ß√£o.", "warning")
            return

        # A√ß√£o de consumo com popup
        if acao == "CONSUMO":
            dialog = DialogoConsumo(self)
            if dialog.exec_() == QDialog.Accepted:
                motivo, operacoes, avaliacao = dialog.get_values()
                resposta = realizar_movimentacao(
                    self.rfid_usuario, codigo_barras, acao, quantidade, motivo, operacoes, avaliacao
                )
            else:
                return  # Cancelado
        else:
            resposta = realizar_movimentacao(self.rfid_usuario, codigo_barras, acao, quantidade)

        if isinstance(resposta, dict):
            if resposta.get("status"):
                self._exibir_mensagem("Sucesso", resposta.get("mensagem"), "info")
                self._limpar_campos()
                self.carregar_ultimas_movimentacoes()
            else:
                self._exibir_mensagem("Erro", resposta.get("mensagem"), "warning")
        else:
            if resposta.startswith("‚úÖ"):
                self._exibir_mensagem("Sucesso", resposta, "info")
                self._limpar_campos()
                self.carregar_ultimas_movimentacoes()
            else:
                self._exibir_mensagem("Erro", resposta, "warning")



    def _limpar_campos(self):
        """
        Limpa os campos de entrada e reseta os labels para os valores padr√£o.
        """
        self.codigo_barras_input.clear()
        self.lbl_descricao.setText("üîé Descri√ß√£o: -")
        self.lbl_estoque.setText("üì¶ Estoque Atual: -")
        self.spin_quantidade.setValue(1)

    def carregar_ultimas_movimentacoes(self):
        """
        Carrega e exibe as √∫ltimas movimenta√ß√µes na tabela.
        """
        dados = buscar_ultimas_movimentacoes()
        self.tabela.setRowCount(0)
        for linha in dados:
            row = self.tabela.rowCount()
            self.tabela.insertRow(row)
            for col, item in enumerate(linha):
                self.tabela.setItem(row, col, QTableWidgetItem(str(item)))
